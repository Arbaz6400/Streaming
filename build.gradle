buildscript {
    repositories {
        mavenLocal()
        maven {
            url "${NEXUS_URL}"
            credentials {
                username = "${NEXUS_USERNAME}"
                password = "${NEXUS_PASSWORD}"
            }
        }
    }
    dependencies {
        classpath("com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:7.1.2") {
            exclude group: "org.jdom", module: "jdom2"
        }
    }
}

plugins {
    id "java"
    id "application"
    id "project-report"
    id "maven-publish"
    id "jacoco"
}

apply plugin: "com.github.johnrengelman.shadow"

ext {
    flinkVersion = "2.0.0"
    kafkaConnectorVersion = "4.0.0-2.0" // Compatible with Flink 2.0
    cucumberVersion = "6.5.0"
}

group = "com.enbd.daas.leap.streaming"
version = "1.0.0"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

mainClassName = "com.enbd.daas.leap.streaming.Main" // <-- adjust to your main class

repositories {
    mavenLocal()
    maven {
        url "${NEXUS_URL}"
        credentials {
            username = "${NEXUS_USERNAME}"
            password = "${NEXUS_PASSWORD}"
        }
    }
    mavenCentral()
}

dependencies {
    // Flink core streaming
    implementation("org.apache.flink:flink-core:${flinkVersion}") {
        exclude group: 'org.apache.flink', module: 'flink-shaded-netty'
        exclude group: 'org.apache.flink', module: 'flink-shaded-zookeeper-3'
    }

    // Kafka Connector
    implementation("org.apache.flink:flink-connector-kafka:${kafkaConnectorVersion}")

    // Cucumber (testing)
    testImplementation("io.cucumber:cucumber-java:${cucumberVersion}")
    testImplementation("io.cucumber:cucumber-junit:${cucumberVersion}")

    testImplementation("junit:junit:4.13.2")
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'com/enbd/daas/leap/streaming/apps/**',
                'com/enbd/daas/leap/streaming/apps/config/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'com/enbd/daas/leap/streaming/apps/**',
                'com/enbd/daas/leap/streaming/apps/config/**'
            ])
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

shadowJar {
    mergeServiceFiles()
    zip64 true
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
        resource 'reference.conf'
    }
}

tasks.register("install") {
    dependsOn("publishToMavenLocal")
}

tasks.register("prepareArtifacts") {
    dependsOn("build", "shadowJar", "publishToMavenLocal")

    doLast {
        def artifactsDir = file("$buildDir/artifacts")
        artifactsDir.mkdirs()

        // Copy shadow JAR (fat jar)
        copy {
            from("$buildDir/libs")
            include("*.jar")
            into(artifactsDir)
        }

        // Copy generated POM
        copy {
            from("$buildDir/publications/mavenJava")
            include("pom-default.xml")
            into(artifactsDir)
            rename { "pom.xml" }
        }

        println "âœ… Artifacts prepared at: $artifactsDir"
    }
}
